name: Build binary and Docker image

on: [push]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29

  build:
    runs-on: ubuntu-20.04
    name: Build
    steps:
      - uses: actions/checkout@v2
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Create dir
        run: mkdir bin
      - name: Build
        run: go build -o bin/ -v ./...
      - uses: actions/upload-artifact@master
        with:
          name: bin
          path: bin/

  release:
    name: Release
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: bin
          path: bin/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          draft: true
          prerelease: false
      - name: Upload APIClient Release Asset
        id: upload-apiclient-release-asset  
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/apiclient
          asset_name: apiclient-${{ github.ref }}
          asset_content_type: application/vnd.github.VERSION.raw
      - name: Upload Demodownloader Release Asset
        id: upload-demodownloader-release-asset  
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/demodownloader
          asset_name: demodownloader-${{ github.ref }}
          asset_content_type: application/vnd.github.VERSION.raw
      - name: Upload Gameclient Release Asset
        id: upload-gameclient-release-asset  
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/gameclient
          asset_name: gameclient-${{ github.ref }}
          asset_content_type: application/vnd.github.VERSION.raw
      - name: Upload Demoparser Release Asset
        id: upload-demoparser-release-asset  
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/demoparser
          asset_name: demoparser-${{ github.ref }}
          asset_content_type: application/vnd.github.VERSION.raw

  docker:
    name: Docker
    runs-on: ubuntu-20.04
    needs: build
    # Run on tag
    if: github.ref == 'refs/heads/main' || startsWith( github.ref, 'refs/tags/releases/')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: cludch/csgo-tools,ghcr.io/cludch/csgo-tools/csgo-tools
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64,linux/386
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
